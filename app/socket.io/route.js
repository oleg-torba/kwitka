import { NextResponse } from "next/server";
import { Server } from "socket.io";

let io; // –û–≥–æ–ª–æ—à—É—î–º–æ –∑–º—ñ–Ω–Ω—É –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä—É —Å–æ–∫–µ—Ç—ñ–≤

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó WebSocket —Å–µ—Ä–≤–µ—Ä–∞
const initSocketServer = (server) => {
  if (!io) {
    console.log("üîå –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π Socket.IO —Å–µ—Ä–≤–µ—Ä...");
    io = new Server(server, {
      cors: { origin: "*" }, // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ –±—É–¥—å-—è–∫–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
    });

    io.on("connection", (socket) => {
      console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è:", socket.id);

      // –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
      socket.on("sendNotification", (notification) => {
        console.log("üì© –ù–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:", notification);
        io.emit("receiveNotification", notification); // –í–∏–ø—Ä–æ–º—ñ–Ω—é—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º
      });

      socket.on("disconnect", () => {
        console.log("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è:", socket.id);
      });
    });
  }
};

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω—å
const ioHandler = (req) => {
  const { method } = req;

  if (method === "POST") {
    const { message } = req.body; // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É

    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ WebSocket
    if (message) {
      io.emit("receiveNotification", { message }); // –í–∏–ø—Ä–æ–º—ñ–Ω—é—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    }

    return NextResponse.json({ message: "Notification sent to all clients" });
  }

  // –Ø–∫—â–æ –∑–∞–ø–∏—Ç GET, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ, —â–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î
  if (method === "GET") {
    return NextResponse.json({ message: "Socket.IO server is running" });
  }
};

export const GET = ioHandler;
export const POST = ioHandler;
